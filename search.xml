<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线性回归</title>
      <link href="/2024/07/07/ml_1/"/>
      <url>/2024/07/07/ml_1/</url>
      
        <content type="html"><![CDATA[<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><h2 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h2><p>线性回归试图找到一条直线，使得$f(x_i)=wx_i+b$，$w、b$是模型的参数。假设$y_i$是真实值，$f(x_i)$是预测值，那么$E(w, b)$表示模型预测值和真实值的误差。</p><p>$$<br>\begin{align}<br>E(w, b) &amp;= \sum_{i=1}^{m} (y_i - f(x_i))^2 \<br>        &amp;= \sum_{i=1}^{m} (y_i - wx_i - b)^2<br>\end{align}<br>$$</p><p>基于均方误差最小化来进行求解模型的方法称为“最小二乘法”。</p><p>$$<br>\begin{align}<br>\frac{\partial E_{(w, b)}}{\partial w}<br>    &amp;= \frac{\partial}{\partial w}[\sum_{i=1}^{m}(y_i-wx_i-b)^2] \<br>    &amp;= \sum_{i=1}^{m} \frac{\partial}{\partial w}(y_i-wx_i-b)^2 \<br>    &amp;= \sum_{i=1}^{m} 2(y_i-wx_i-b)(-x_i) \<br>    &amp;= 2(w\sum_{i=1}^{m}x_i^2-\sum_{i=1}^{m}(y_i-b)x_i) \</p><p>\frac{\partial E_{(w, b)}}{\partial b}<br>    &amp;= \frac{\partial}{\partial b}[\sum_{i=1}^{m}(y_i-wx_i-b)^2] \<br>    &amp;= \sum_{i=1}^{m} \frac{\partial}{\partial b}(y_i-wx_i-b)^2 \<br>    &amp;= \sum_{i=1}^{m} 2(y_i-wx_i-b)(-1) \<br>    &amp;= \sum_{i=1}^{m} 2(b-y_i+wx_i) \<br>    &amp;= 2(\sum_{i=1}^{m}b-\sum_{i=1}^{m}y_i+\sum_{i=1}^{m}wx_i) \<br>    &amp;= 2(mb - \sum_{i=1}^{m}(y_i-wx_i)) \</p><p>\end{align}<br>$$</p><p>根据$\frac{\partial E_{(w, b)}}{\partial w} =0$和$\frac{\partial E_{(w, b)}}{\partial b}=0$即可求出参数$w和b$。</p><h2 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h2><p>如果有多个特征，那么线性回归的模型可以写成：<br>$$<br>    f(x_i) = \mathbf{w}^T\mathbf{x_i} + b<br>$$</p><p>类似的，利用最小二乘法对参数$\mathbf{w}$进行估计。</p><p>$$<br>\begin{align}<br>    (\mathbf{w}^*, b^*)<br>        &amp;= \arg\min_{(\mathbf{w}, b)} \sum_{i=1}^m (f(x_i) - y_i)^2 \<br>        &amp;= \arg\min_{(\mathbf{w}, b)} \sum_{i=1}^m (y_i - f(x_i))^2 \<br>        &amp;= \arg\min_{(\mathbf{w}, b)} \sum_{i=1}^m (y_i - (\mathbf{w}^T\mathbf{x_i} + b))^2<br>\end{align}<br>$$</p><p>为了计算方便，我们做以下替换：<br>$$<br>\begin{align}<br>    \hat{\mathbf{w}} &amp;= \begin{pmatrix}<br>                            w_1 \<br>                            w_2 \<br>                            \vdots \<br>                            w_d \<br>                            b<br>                        \end{pmatrix} \<br>                        \<br>    \hat{\mathbf{x_i}} &amp;= \begin{pmatrix}<br>                            \mathbf{x_{i1}} \<br>                            \mathbf{x_{i2}} \<br>                            \vdots \<br>                            \mathbf{x_{id}} \<br>                            1<br>                          \end{pmatrix}<br>    \</p><pre><code>f(x_i) &amp;= \begin{pmatrix} w_1 &amp; w_2 &amp; \cdots &amp; w_d &amp; w_{d+1}\end{pmatrix}         \begin{pmatrix} x_{i1} \\                        x_{i2} \\                        \vdots \\                        x_{id} \\                        1         \end{pmatrix} \\f(\hat{\mathbf{x_i}}) &amp;= \hat{\mathbf{w}}^T \hat{\mathbf{x_i}}</code></pre><p>\end{align}<br>$$</p><p>因此，我们可以得到：<br>$$<br>\begin{align}<br>    \hat{\mathbf{w}}^* &amp;= \arg\min_{\hat{\mathbf{w}}} \sum_{i=1}^m (y_i - \hat{\mathbf{w}}^T\hat{\mathbf{x_i}})^2 \<br>    &amp;= \arg\min_{\hat{\mathbf{w}}} \sum_{i=1}^m (y_i - \hat{\mathbf{x_i}}^T\hat{\mathbf{w}})^2 \<br>    &amp;= \arg\min_{\hat{\mathbf{w}}}<br>        \begin{pmatrix}<br>        y_1 - \hat{\mathbf{x_1}}^T\hat{\mathbf{w}}, &amp;<br>        \cdots, &amp;<br>        y_m - \hat{\mathbf{x_m}}^T\hat{\mathbf{w}}<br>        \end{pmatrix}<br>        \begin{pmatrix}<br>        y_1 - \mathbf{\hat{x_1}^T\hat{w}} \<br>        \vdots \<br>        y_m - \mathbf{\hat{x_m}^T\hat{w}} \<br>        \end{pmatrix} \<br>    &amp;= \arg\min_{\hat{\mathbf{w}}}(\mathbf{y}-\mathbf{X\hat{w}})^T(\mathbf{y}-\mathbf{X\hat{w}}) \<br>\end{align}<br>$$<br>其中，<br>$$<br>\begin{align}<br>    \mathbf{X} &amp;= \begin{pmatrix}<br>    x_{11} &amp; x_{12} &amp; \cdots &amp; x_{1d}  &amp; 1 \<br>    \vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots \<br>    x_{m1} &amp; x_{m2} &amp; \cdots &amp; x_{md}  &amp; 1 \<br>    \end{pmatrix} \<br>    &amp;= \begin{pmatrix}<br>    \mathbf{x}_1^T  \<br>    \vdots \<br>    \mathbf{x}_m^T<br>    \end{pmatrix}<br>\end{align}<br>$$</p><p>令<br>$$<br>\begin{align}<br>    E_{\hat{\mathbf{w}}} &amp;= (\mathbf{y}-\mathbf{X\hat{w}})^T(\mathbf{y}-\mathbf{X\hat{w}})<br>\end{align}<br>$$<br>对$\hat{\mathbf{w}}$求导，得<br>$$<br>    \frac{\partial E_{\hat{\mathbf{w}}}}{\partial \hat{\mathbf{w}}} = 2\mathbf{X}^T(\mathbf{X\hat{w}}-\mathbf{y})<br>$$</p><p>当上面的式子为0时，可求得参数<br>$$</p><p>\hat{\mathbf{w}} = (\mathbf{X}^T\mathbf{X})^{-1} \mathbf{X}^T \mathbf{y}</p><p>$$</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习基本概念</title>
      <link href="/2024/07/05/ml_ji_ben_gai_nian/"/>
      <url>/2024/07/05/ml_ji_ben_gai_nian/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习基本概念"><a href="#机器学习基本概念" class="headerlink" title="机器学习基本概念"></a>机器学习基本概念</h1><p>什么是机器学习？<br>机器学习是一种通过数据训练算法，让计算机从经验中学习，并且在没有明确编程的情况下进行预测或决策的技术。可以将机器学习想象成一种方法，让计算机能够识别模式和规律，以便在未来遇到类似情况时作出智能决策。“经验”就是大量的数据。机器学习产生的结果被称为模型，这个模型可以用于预测未知数据的结果。模型可以理解就是一个“套路”。当计算机知道这个“套路”之后，就会解决类似的问题。</p><p>请看下面的例子：<br>假设你有个朋友张三，他非常喜欢看电影。每次张三看完电影后都会告诉你他是否喜欢这部电影。你注意到，张三喜欢的电影通常都有一些共同点，比如导演，演员，类型，评分等等。你决定帮助张三做个电影推荐系统。</p><h2 id="1-收集数据"><a href="#1-收集数据" class="headerlink" title="1. 收集数据"></a>1. 收集数据</h2><p>记录张三看过的电影，并且记录每部电影的相关信息，以及他是否喜欢这部电影。这些信息包括</p><ul><li>电影名称</li><li>导演</li><li>主演</li><li>类型</li><li>评分</li><li>是否喜欢</li></ul><p>这些记录就形成了一个数据集。这里需要注意，张三看过的所有电影形成了数据集。</p><blockquote><p><strong>数据集(data set)、样本(sample)</strong><br>用来训练模型的数据集合。每一条数据是一个样本，一个样本描述了我们所研究的事件或对象。事件或者对象在某些方面的表现或性质称为属性(attribute)或者特征(feature)。属性的取值称为属性值(attribute value)。本例中，电影名称、导演、主演、类型、评分就是属性，而喜欢与否就是标记(label)。</p></blockquote><h2 id="2-准备数据"><a href="#2-准备数据" class="headerlink" title="2.准备数据"></a>2.准备数据</h2><p>将数据整理成表格，每一行代表一部电影，每一列代表一个特征。最后一列是张三的评价。</p><table><thead><tr><th align="center">电影名称</th><th align="center">导演</th><th align="center">主演</th><th align="center">类型</th><th align="center">评分</th><th align="center">是否喜欢</th></tr></thead><tbody><tr><td align="center">让子弹飞</td><td align="center">姜文</td><td align="center">周润发</td><td align="center">喜剧片</td><td align="center">5</td><td align="center">喜欢</td></tr><tr><td align="center">肖申克的救赎</td><td align="center">Frank Darabont</td><td align="center">Tim Robbins</td><td align="center">犯罪</td><td align="center">5</td><td align="center">喜欢</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr></tbody></table><blockquote><p><strong>样本和样例</strong><br>样本是数据集的一个元素。标记通常也是样本的一部分。</p></blockquote><h2 id="3-选择模型"><a href="#3-选择模型" class="headerlink" title="3. 选择模型"></a>3. 选择模型</h2><p>选择一个简单的机器学习模型，比如决策树模型，来学习张三的电影偏好。</p><blockquote><p><strong>分类和回归</strong><br>在机器学习当中，有一类任务是为了预测某个样本是属于“什么”的，这种任务被称为分类任务。只有两种结果的分类称为二分类任务。还有一类任务是预测样本是属于什么数值的，这种任务被称为回归任务。分类任务的预测结果是离散的，回归任务的预测结果是连续的。</p></blockquote><h2 id="4-训练模型"><a href="#4-训练模型" class="headerlink" title="4. 训练模型"></a>4. 训练模型</h2><p>使用记录的张三看过的电影数据来训练模型。模型会分析张三喜欢的电影，然后根据这些电影来推荐电影。</p><blockquote><p><strong>假设空间(Hypothesis Space)</strong><br>在机器学习中，Hypothesis Space是指模型在训练过程中可能选择的所有假设的集合。</p></blockquote><p>比如下面就是模型在训练过程中涉及到的一个假设，其为假设空间中的一个元素。</p><table><thead><tr><th align="center">电影名称</th><th align="center">导演</th><th align="center">主演</th><th align="center">类型</th><th align="center">评分</th></tr></thead><tbody><tr><td align="center">让子弹飞</td><td align="center">姜文</td><td align="center">周润发</td><td align="center">喜剧片</td><td align="center">5</td></tr></tbody></table><h2 id="5-评估模型"><a href="#5-评估模型" class="headerlink" title="5. 评估模型"></a>5. 评估模型</h2><p>使用一些未用于训练的数据来测试模型，看看它是否可以准确预测张三是否喜欢一部电影。</p><blockquote><p><strong>泛化能力</strong><br>学得的模型能够适用于其他样本的能力。</p></blockquote><h2 id="6-应用模型"><a href="#6-应用模型" class="headerlink" title="6. 应用模型"></a>6. 应用模型</h2><p>训练和评估完成后，就可以使用这个模型给张三推荐电影了。每当有一部新电影时，输入这部电影的特征（导演、主演、类型、评分），模型就会根据学习到的规律预测张三是否喜欢这部电影。</p><blockquote><p><strong>聚类学习</strong><br>聚类学习是是将训练集中的样本自动分为若干组，每组称为一个cluster(簇)，这些簇都有各自潜在规律，并没有人为指定。</p></blockquote><blockquote><p><strong>监督学习和无监督学习</strong><br>监督学习有标记信息，无监督学习没有标记信息。聚类学习是是属于无监督学习。张三的电影偏好是就是监督学习。</p></blockquote><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token comment"># 假设我们有以下数据</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'导演'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'导演A'</span><span class="token punctuation">,</span> <span class="token string">'导演B'</span><span class="token punctuation">,</span> <span class="token string">'导演A'</span><span class="token punctuation">,</span> <span class="token string">'导演C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'类型'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'动作片'</span><span class="token punctuation">,</span> <span class="token string">'喜剧片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">,</span> <span class="token string">'科幻片'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'主演'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'演员A'</span><span class="token punctuation">,</span> <span class="token string">'演员B'</span><span class="token punctuation">,</span> <span class="token string">'演员A'</span><span class="token punctuation">,</span> <span class="token string">'演员C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'评分'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3.8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'张三的评价'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'喜欢'</span><span class="token punctuation">,</span> <span class="token string">'不喜欢'</span><span class="token punctuation">,</span> <span class="token string">'喜欢'</span><span class="token punctuation">,</span> <span class="token string">'不喜欢'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment"># 创建DataFrame</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 特征和标签</span>X <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'导演'</span><span class="token punctuation">,</span> <span class="token string">'类型'</span><span class="token punctuation">,</span> <span class="token string">'主演'</span><span class="token punctuation">,</span> <span class="token string">'评价'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>y <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'张三的评价'</span><span class="token punctuation">]</span><span class="token comment"># 将分类特征转换为数值</span>X <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment"># 将数据分为训练集和测试集</span>X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token comment"># 创建决策树模型并训练</span>model <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token comment"># 预测新电影</span>new_movie <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'导演'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'导演A'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'类型'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'动作片'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'主演'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'演员A'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'评分'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>new_movie <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>new_movie<span class="token punctuation">)</span><span class="token punctuation">.</span>reindex<span class="token punctuation">(</span>columns<span class="token operator">=</span>X<span class="token punctuation">.</span>columns<span class="token punctuation">,</span> fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>prediction <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>new_movie<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"张三对这部电影的评价是: </span><span class="token interpolation"><span class="token punctuation">{</span>prediction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac环境搭建基于Hexo的个人博客指南</title>
      <link href="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/"/>
      <url>/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写博客早已是众多技术爱好者们积累知识、分享知识的一个途径。国内有很多不错的写作平台，也许你也会像我一样纠结该去哪里写。而搭建一个属于自己的博客平台，根据自己的喜好突出自己的风格，或许不失为一种更好的选择。类似的教程有很多，但是都不够全面或者是版本老旧已经无法按照文中流程顺利部署。本文从头到尾按照先本地部署后服务端部署的思路，一步步讲解搭建流程，希望读者能够有所收获。如有错误还请不吝赐教。</p><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p> 环境：<code>macOS Monterey</code> <code>14.0</code> <code>Apple M1</code></p><h1 id="一、使用命令行安装相关程序"><a href="#一、使用命令行安装相关程序" class="headerlink" title="一、使用命令行安装相关程序"></a>一、使用命令行安装相关程序</h1><blockquote><p>可以先通过<code>which</code>命令查看一下是否安装过某个命令行程序，比如<code>which brew</code>,该命令会返回某程序的安装路径。</p></blockquote><p><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/which%E5%91%BD%E4%BB%A4%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85brew.png" alt="查看brew安装路径"><br><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/which%E5%91%BD%E4%BB%A4%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85git.png" alt="查看git安装路径"></p><h2 id="1-安装homebrew"><a href="#1-安装homebrew" class="headerlink" title="1.安装homebrew"></a>1.安装homebrew</h2><p>强烈<strong>推荐使用homebrew</strong>管理Mac上的应用程序。一般Mac环境下的程序包都可以通过brew进行安装或者删除。下文中提到的node，不推荐使用官方的方式安装，否则删除的时候不是很方便。</p><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h2><p>略</p><h2 id="3-安装node"><a href="#3-安装node" class="headerlink" title="3.安装node"></a>3.安装node</h2><p>使用brew安装程序非常简单，如：<code>brew install node</code><br><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/%E4%BD%BF%E7%94%A8brew%E5%AE%89%E8%A3%85node.png" alt="使用brew安装node"></p><p>查看是否已经安装成功：<code>node -v</code> <code>npm -v</code>。node安装成功后会有两个程序被安装，可以通过<code>node</code>和<code>npm</code>指令进行验证。</p><blockquote><p>npm是Node.js自带的一个包管理工具，类似brew。</p></blockquote><p><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/%E6%9F%A5%E7%9C%8Bnode%E7%89%88%E6%9C%AC.png" alt="查看node和npm版本，验证是否安装成功"></p><p> 如果命令可以正常执行，能够正常显示出版本号，说明该程序已经安装成功。</p><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h2><p>执行命令：<code>brew install hexo</code><br>同样的，执行命令查看一下版本，验证是否安装成功：<code>hexo -v</code>或者<code>hexo version</code></p><p><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/%E6%9F%A5%E7%9C%8Bhexo%E7%89%88%E6%9C%AC.png" alt="查看hexo版本"></p><h1 id="二、本地调试"><a href="#二、本地调试" class="headerlink" title="二、本地调试"></a>二、本地调试</h1><p>经过以上步骤，我们已经完成了一部分搭建工作，可以先在本地验证一下是否能够正常工作。</p><h2 id="1-切换到你将来准备存放博客相关内容的目录下，在这里笔者选择放在～-Documents-。"><a href="#1-切换到你将来准备存放博客相关内容的目录下，在这里笔者选择放在～-Documents-。" class="headerlink" title="1. 切换到你将来准备存放博客相关内容的目录下，在这里笔者选择放在～/Documents/。"></a>1. 切换到你将来准备存放博客相关内容的目录下，在这里笔者选择放在<code>～/Documents/</code>。</h2><ul><li>执行命令：<code>cd ~/Documents/</code></li><li>执行命令：<code>hexo init MyBlog</code></li></ul><p> <code>MyBlog</code>是随便起的，你可以根据你的意图起其他名称。命令执行后会在当前目录下创建出一个名为<code>MyBlog</code>的文件夹，该文件夹内会存放生成博客静态网页的所有相关文件，例如配置文件、博客原文、样式代码等等。</p><p>执行命令后文件夹内容如图：<br><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/MyBlog%E5%86%85%E5%AE%B9.png" alt="MyBlog文件夹内容"></p><h2 id="2-开启本地服务器。默认情况下，访问网址为：-http-localhost-4000-。"><a href="#2-开启本地服务器。默认情况下，访问网址为：-http-localhost-4000-。" class="headerlink" title="2. 开启本地服务器。默认情况下，访问网址为： http://localhost:4000/。"></a>2. 开启本地服务器。默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></h2><ul><li>执行命令：<code>hexo s</code>或者<code>hexo server</code>（下文中使用前者）</li></ul><p>此时打开浏览器，输入<code>http://localhost:4000/</code>，不出意外会显示一个示例页面。</p><p><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%90%AF.png" alt="开启本地服务"></p><p>如果能够正常流量默认页面（如上图），说明本地服务已经可以正常工作。</p><h1 id="三、部署至GitHub-Pages"><a href="#三、部署至GitHub-Pages" class="headerlink" title="三、部署至GitHub Pages"></a>三、部署至<code>GitHub Pages</code></h1><p>恭喜你能够顺利完成以上步骤，至此我们可以尝试通过GitHub网站提供的服务进行个人博客建站。</p><blockquote><p>如果你还没有GitHub账号，建议你<a href="https://github.com/">注册一个</a>。</p></blockquote><h2 id="1-在GitHub上新建仓库，仓库名为-github-io，其中username为github登陆账号的用户名。"><a href="#1-在GitHub上新建仓库，仓库名为-github-io，其中username为github登陆账号的用户名。" class="headerlink" title="1. 在GitHub上新建仓库，仓库名为<username>.github.io，其中username为github登陆账号的用户名。"></a>1. 在GitHub上新建仓库，仓库名为<code>&lt;username&gt;.github.io</code>，其中<code>username</code>为github登陆账号的用户名。</h2><blockquote><p>特别要注意仓库名称的格式，必须是以用户名开头。</p></blockquote><p><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png" alt="新建仓库"></p><h2 id="2-修改配置文件-config-yml。"><a href="#2-修改配置文件-config-yml。" class="headerlink" title="2. 修改配置文件_config.yml。"></a>2. 修改配置文件<code>_config.yml</code>。</h2><p>在<code>MyBlog</code>文件夹内找到该文件，打开文件找到如下代码进行修改。以下配置告诉hexo将来部署到什么平台以及文章和代码存放到哪个仓库，今后博客文章将会上传到该仓库。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># Deployment## Docs<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>hexo<span class="token punctuation">.</span>io<span class="token operator">/</span>docs<span class="token operator">/</span>one<span class="token operator">-</span>command<span class="token operator">-</span>deployment<span class="token literal-property property">deploy</span><span class="token operator">:</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> git # 因为我们需要部署到git  <span class="token literal-property property">repo</span><span class="token operator">:</span> git@github<span class="token punctuation">.</span>com<span class="token operator">:</span>CoderKingXY<span class="token operator">/</span>coderkingxy<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git # 这里修改为你自己的仓库，后面介绍有关该仓库创建的要点  <span class="token literal-property property">branch</span><span class="token operator">:</span> # 分支名称，可不填写使用默认master分支  <span class="token literal-property property">message</span><span class="token operator">:</span> # 自定义提交信息，可不填写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE.png" alt="修改配置"></p><h2 id="3-安装插件。"><a href="#3-安装插件。" class="headerlink" title="3. 安装插件。"></a>3. 安装插件。</h2><p>以上修改后的配置，是在插件的参与下生效的。</p><ul><li>执行命令： <code> npm install hexo-deployer-git --save</code>，安装插件；</li><li>执行命令：<code>hexo d</code>或者<code>hexo deploy</code>（为了方便起见，下文统一使用前者）。如果你刚创建完仓库没多久，执行此命令可能会报错，稍等几分钟后执行即可。</li></ul><h2 id="4-预览博客"><a href="#4-预览博客" class="headerlink" title="4. 预览博客"></a>4. 预览博客</h2><p>浏览器输入<code>https://coderkingxy.github.io</code>即可访问到刚刚部署至github的博客首页。（记得将这里的<code>coderkingxy</code>替换为你自己的用户名）</p><p><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F.png" alt="部署成功"></p><h1 id="四、新建博客并部署"><a href="#四、新建博客并部署" class="headerlink" title="四、新建博客并部署"></a>四、新建博客并部署</h1><blockquote><p>至此，你已经成功将本地博客部署至<code>Github</code>，其他人可以通过<code>Github</code>提供的域名访问你的博客了。接下来会介绍如何从0开始新建博客，并部署。</p></blockquote><h2 id="1-使用命令hexo-new-post-算法基础-冒泡排序创建一篇名称为“算法基础-冒泡排序”的博客；"><a href="#1-使用命令hexo-new-post-算法基础-冒泡排序创建一篇名称为“算法基础-冒泡排序”的博客；" class="headerlink" title="1. 使用命令hexo new post 算法基础-冒泡排序创建一篇名称为“算法基础-冒泡排序”的博客；"></a>1. 使用命令<code>hexo new post 算法基础-冒泡排序</code>创建一篇名称为“算法基础-冒泡排序”的博客；</h2><p><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.png" alt="创建博客"></p><h2 id="2-生成博客，开启本地服务进行预览"><a href="#2-生成博客，开启本地服务进行预览" class="headerlink" title="2. 生成博客，开启本地服务进行预览"></a>2. 生成博客，开启本地服务进行预览</h2><ul><li>执行命令<code>hexo g</code>或者<code>hexo generate</code>（下文使用前者）</li><li>执行命令<code>hexo s</code>或者<code>hexo server</code>（下文使用前者）</li></ul><p><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/%E7%94%9F%E6%88%90%E5%8D%9A%E5%AE%A2.png" alt="生成博客"></p><ul><li>浏览器输入地址<code>http://localhost:4000/</code>进行预览，可以看到文章已经出现在首页。此时还未编写内容，稍后介绍。<br><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%A2%84%E8%A7%88.png" alt="预览"></li></ul><h2 id="4-重新部署"><a href="#4-重新部署" class="headerlink" title="4. 重新部署"></a>4. 重新部署</h2><ul><li>执行部署命令：<code>hexo d</code> ，几分钟后访问Github上的仓库域名查看。</li></ul><p><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F.png" alt="新建博客部署成功"></p><h1 id="五、更换主题"><a href="#五、更换主题" class="headerlink" title="五、更换主题"></a>五、更换主题</h1><blockquote><p>Hexo官方网站上有很多开源的<a href="https://hexo.io/themes/">主题</a>，Github上也有，大家可以随意选择自己喜欢的主题。</p></blockquote><h2 id="1-找到你喜欢的主题，这里以next主题为例；"><a href="#1-找到你喜欢的主题，这里以next主题为例；" class="headerlink" title="1. 找到你喜欢的主题，这里以next主题为例；"></a>1. 找到你喜欢的主题，这里以next主题为例；</h2><ul><li>执行命令: <code>git clone https://github.com/next-theme/hexo-theme-next.git themes/next</code>。这个命令的作用是在<code>themes</code>内新建一个文件夹<code>next</code>，将GitHub网站上托管的名为<code>hexo-theme-next</code>的仓库下载至<code>next</code>文件夹内，next是我们自己命名的；</li><li>修改配置文件<code>_config.yml</code>里面的theme一项为next；</li></ul><p><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE.png" alt="修改主题"></p><ul><li>执行命令：<code>hexo g</code>生成博客；</li><li>执行命令：<code>hexo s</code>开启服务，浏览区输入地址<code>http://localhost:4000/</code>即可预览；</li></ul><p><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/%E4%B8%BB%E9%A2%98%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88.png" alt="修改后本地预览"></p><ul><li>如果你觉得该主题还满意，即可执行命令：<code>hexo d</code>进行部署了；</li></ul><h1 id="六、开始写作"><a href="#六、开始写作" class="headerlink" title="六、开始写作"></a>六、开始写作</h1><blockquote><p>所有的准备工作都已经完成，下面简单介绍如何编辑我们的博客。以上文创建的“算法基础-冒泡排序”为例。</p></blockquote><ul><li>停止本地服务：<code>ctrl + C</code>。非必要操作，可自己根据实际情况开启或者关闭；</li><li>刚才创建的博客文档在<code>～Documents/MyBlog/source/_posts/算法基础-冒泡排序.md </code>，使用<a href="https://markdown.com.cn/basic-syntax/">Markdown语法</a>编辑即可，当然你可以选择一款你喜欢的编辑器进行编辑，例如<a href="https://code.visualstudio.com/">VSCode</a>或者<a href="https://atom-china.org/t/topic/6848">Atom</a>等等；</li><li>可以在<code>Front-matter</code>编辑文章相关的参数。Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。Front- matter是官网给取的一个名称，这里就不翻译过来了。</li></ul><p><img src="/2022/11/29/mac_huan_jing_da_jian_ji_yu_hexo_de_ge_ren_bo_ke_zhi_nan/%E5%8D%9A%E5%AE%A2%E7%BC%96%E8%BE%91%E7%A4%BA%E4%BE%8B.png" alt="编辑博客示例"></p><p>编辑完之后，按照本文上面的部分进行生成博客、部署即可。更多详细内容可以参阅官方文档。</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>先在本地调试成功</li><li>服务端调试成功</li><li>创建博客并部署</li><li>写作</li><li>修改主题</li></ul><blockquote><p>参考文献：<br><a href="https://hexo.io/zh-cn/docs/commands#generate">https://hexo.io/zh-cn/docs/commands#generate</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法基础-冒泡排序</title>
      <link href="/2022/11/28/suan_fa_ji_chu_mou_pao_pai_xu/"/>
      <url>/2022/11/28/suan_fa_ji_chu_mou_pao_pai_xu/</url>
      
        <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
